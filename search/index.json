[{"content":"串口通讯 16进制发 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 public void sendMsg(string msg) { if (serialPort.IsOpen) { byte[] data = HexStringToByteArray(msg); serialPort.Write(data, 0, data.Length); string s = string.Empty; for (int i = 0; i \u0026lt; data.Length; i ++) { s += data[i].ToString(); } // MachineException.CallException(ExceptionType.NormalInfo, \u0026#34;data\u0026#34;, s); } else { MessageBox.Show(\u0026#34;串口未打开\u0026#34;); } } public static byte[] HexStringToByteArray(string hex) { int length = hex.Length; if (length % 2 != 0) { throw new ArgumentException(\u0026#34;十六进制字符串长度必须为偶数。\u0026#34;); } byte[] bytes = new byte[length / 2]; for (int i = 0; i \u0026lt; length; i += 2) { string hexPair = hex.Substring(i, 2); bytes[i / 2] = Convert.ToByte(hexPair, 16); } return bytes; } 16进制收 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 string _Data = string.Empty; public void ReciveMsg(object sender, SerialDataReceivedEventArgs e) { SerialPort sp = (SerialPort)sender; // 读取字节数据 int bytesToRead = sp.BytesToRead; byte[] buffer = new byte[bytesToRead]; sp.Read(buffer, 0, bytesToRead); string hexData = BitConverter.ToString(buffer).Replace(\u0026#34;-\u0026#34;, \u0026#34;\u0026#34;); //010304024E00009B9C _Data += hexData; MachineException.CallException(ExceptionType.NormalInfo, \u0026#34;SerialPort Received Bytes\u0026#34;, _Data); // 检测结束符 if (_Data.StartsWith(\u0026#34;0103\u0026#34;) \u0026amp;\u0026amp; _Data.Length == 18) // 根据需要变 { MachineException.CallException(ExceptionType.NormalInfo, \u0026#34;_Data.EndsWith(\\\u0026#34;0103\\\u0026#34;) \u0026amp;\u0026amp; _Data.Length == 18\u0026#34;, _Data); GlobalVariable.eReciveData = _Data; string show = _Data; _Data = string.Empty; } } 发字符 1 2 3 4 5 6 7 8 9 10 11 12 public void sendMsg(string msg) { if (serialPort.IsOpen) { byte[] date = System.Text.Encoding.UTF8.GetBytes(msg); serialPort.Write(date, 0, date.Length); } else { MessageBox.Show(\u0026#34;串口未打开\u0026#34;); } } 接收字符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 public void ReciveMsg(object sender, SerialDataReceivedEventArgs e) { SerialPort sp = (SerialPort)sender; string data = sp.ReadExisting(); //读取收到的数据 _Data += data; MachineException.CallException(ExceptionType.NormalInfo, \u0026#34;SerialPort sp.ReadExisting()\u0026#34;, _Data); if (_Data.EndsWith(\u0026#34;\\r\\n\u0026#34;)) { GlobalVariable.eReciveData = _Data; string show = data; //if (formProductMessage != null) //{ // formProductMessage.BeginInvoke(new Action(() =\u0026gt; // { // formProductMessage.rtb_showMsg.AppendText(show + \u0026#34;\\r\\n\u0026#34;); // })); //} _Data = string.Empty; } } public void ReciveMsg(object sender, SerialDataReceivedEventArgs e) { SerialPort sp = (SerialPort)sender; string data = sp.ReadExisting(); //读取收到的数据 _eData += data; if (_eData.EndsWith(\u0026#34;\\r\\n\u0026#34;)) { GlobalVariable.eReciveData = _电流Data; if (GlobalVariable.isShow) this.ProgramForm.formDebug.rtb_Recived.AppendText(_eData); _eData = string.Empty; } if (GlobalVariable.isShow) this.ProgramForm.formDebug.rtb_Recived.AppendText(data); //listReciveDate.Add(date); //Console.WriteLine(date); } PortCommunication.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 using NBVision.Shared; using System; using System.Collections.Generic; using System.IO.Ports; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows.Forms; using NBVision.UI.UserUI; using Nobug2.Vision; using Nobug; namespace NBVision.Flow { public class PortCommunication { public Action\u0026lt;string\u0026gt; laserMsgDisplay; public string Description; public SerialPort serialPort; public Action\u0026lt;string\u0026gt; myAction; public string Port { get; set; } public FormProductMessage formProduct; public List\u0026lt;string\u0026gt; listReciveDate = new List\u0026lt;string\u0026gt;(); public string _hex_order = \u0026#34;AA\u0026#34;; // 通讯命令 public bool isSignal = false; // 默认无信号 public PortCommunication(string description, string port = \u0026#34;COM5\u0026#34;, int baudRate = 9600, Parity parity = Parity.Even, int dataBits = 8, StopBits stopBits = StopBits.One) { this.Description = description; this.Port = port; serialPort = new SerialPort(); serialPort.PortName = port; serialPort.BaudRate = baudRate; serialPort.Parity = parity; serialPort.DataBits = dataBits; serialPort.StopBits = stopBits; serialPort.ReadTimeout = 2000; //serialPort.DataReceived += ReciveMsg; // 全局里面 } public bool Open() { try { if (serialPort != null) { if (!serialPort.IsOpen) { serialPort.Open(); } } return true; } catch (Exception ex) { // MachineException.CallException(ExceptionType.NormalErr, \u0026#34;\u0026#34;, ex.Message); MessageBox.Show(\u0026#34;测试仪器\u0026#34; + ex.Message); return false; } } public void CloseComPort() { if (serialPort != null) { if (serialPort.IsOpen) { serialPort.Close(); } } } } } ","date":"2025-03-05T00:00:00Z","permalink":"https://zihui7896.github.io/p/%E6%B3%B0%E5%9B%BD%E9%87%8D%E9%87%8F%E6%A3%80%E6%B5%8B/","title":"泰国重量检测"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #region xml 保存路径 private string xmlSavePath = @\u0026#34;D:\\\\Config.xml\u0026#34;; [Category(\u0026#34;XML保存路径\u0026#34;)] public string _xmlSavePath { get { return xmlSavePath; } set { xmlSavePath = value; } } #endregion public void Load() { try { Dictionary\u0026lt;string, string\u0026gt; dic = SerializeXmlSwitch.JsonDeserialize\u0026lt;Dictionary\u0026lt;string, string\u0026gt;\u0026gt;(SerializeXmlSwitch.DeserializeFromXml\u0026lt;String\u0026gt;(xmlSavePath)); _条码枪端口 = dic[\u0026#34;_条码枪端口\u0026#34;]; _检测仪器 = dic[\u0026#34;_检测仪器\u0026#34;]; _time_Interval = double.Parse(dic[\u0026#34;_time_Interval\u0026#34;]); _products_weight_Max = double.Parse(dic[\u0026#34;_products_weight_Max\u0026#34;]); _products_weight_Min = double.Parse(dic[\u0026#34;_products_weight_Min\u0026#34;]); } catch (Exception ex) { return; } } // 将值保存到指定文件内 public void Save(Dictionary\u0026lt;string, string\u0026gt; data) { if (!File.Exists(xmlSavePath)) { File.Create(xmlSavePath).Dispose(); } SerializeXmlSwitch.SerializeToXml(xmlSavePath, SerializeXmlSwitch.JsonSerializer(data)); } ","date":"2025-03-05T00:00:00Z","permalink":"https://zihui7896.github.io/p/%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E5%85%B8/","title":"序列化字典"},{"content":" 1 2 3 4 5 6 7 8 this.Invoke()的作用与用法、不阻塞UI界面线程的延时函数 Invoke 与begininvoke区别在于，invoke会阻塞当前线程，直到invoke调用结束，才会继续执行下去，而begininvoke 则可以异步进行调用，也就是该方法封送完毕后马上返回，不会等待委托方法的执行结束，调用者线程将不会被阻塞。但是调用者也可以使用EndInvoke方法或者其它类似 WaitHandle机制等待异步操作的完成。 如果你的后台线程在更新一个UI控件的状态后不需要等待，而是要继续往下处理，那么你就应该使用BeginInvoke来进行异步处理。 如果你的后台线程需要操作UI控件，并且需要等到该操作执行完毕才能继续执行，那么你就应该使用Invoke。 EventHandler即事件委托，表示用于处理不具有事件数据的事件的方法。 代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 this._formMain.UserUIForm.formProductMessage.BeginInvoke(new Action(() =\u0026gt; { this._formMain.UserUIForm.formProductMessage.lb_90_2Code.Text = _programDate.Load; this._formMain.UserUIForm.formProductMessage.lb_90_2Code2.Text = _programDate.UnLoad; this._formMain.UserUIForm.formProductMessage.lb_90_2CodeResult.Text = \u0026#34;1\u0026#34;; this._formMain.UserUIForm.formProductMessage.lb_90_2CodeResult2.Text = \u0026#34;1\u0026#34;; })); this.BeginInvoke(new Action(() =\u0026gt; { this.weight_label.Text = s; })); this.formMain.UserUIForm.BeginInvoke(new Action(() =\u0026gt; { formMain.UserUIForm.formProductMessage.btn_status.Text = \u0026#34;相机处理中...\u0026#34;; formMain.UserUIForm.formProductMessage.btn_status.BackColor = System.Drawing.Color.White; })); ","date":"2025-03-03T00:00:00Z","permalink":"https://zihui7896.github.io/p/c%23%E5%BC%82%E6%AD%A5begininoke/","title":"C#异步BeginInoke"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://zihui7896.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu_2307260c751d0e0b.jpg","permalink":"https://zihui7896.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://zihui7896.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://zihui7896.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://zihui7896.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu_c1ca39d792aee4ab.jpg","permalink":"https://zihui7896.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://zihui7896.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://zihui7896.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"https://zihui7896.github.io/p/emoji-support/","title":"Emoji Support"}]